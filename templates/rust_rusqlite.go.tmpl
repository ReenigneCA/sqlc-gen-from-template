{{- /* 
https://docs.sqlc.dev/en/stable/reference/query-annotations.html
https://github.com/sqlc-dev/sqlc/blob/main/protos/plugin/codegen.proto
https://github.com/rusqlite/rusqlite
https://pkg.go.dev/text/template
*/ -}}


{{- $CacheStatementsGlobal :=  "cache_statements" | GetPluginOption -}}

{{- define "RustType" -}}
{{- $rustType := .Type.Name -}}
{{- $TypeName :=   .Type.Name | ToLower  -}}
{{- if eq $TypeName "integer"}}{{ $rustType = "i64" }}
{{- else if eq $TypeName "text"}}{{ $rustType = "String" }}
{{- else if eq $TypeName "blob"}}{{ $rustType = "Vec<u8>" }}
{{- else if eq $TypeName "real"}}{{ $rustType = "f64" }}
{{- else if eq $TypeName "float"}}{{ $rustType = "f64" }}
{{- else if eq $TypeName "double"}}{{ $rustType = "f64" }}
{{- else if eq $TypeName "boolean"}}{{ $rustType = "bool" }}
{{- else if eq $TypeName "bool"}}{{ $rustType = "bool" }}
{{- end -}}
{{- $rustType }}
{{- end -}}

/* This file is generated from queries.sql using rust_rusqlite.go.tmpl
  This template supports the following plugin options from sqlc.yaml
    cache_statements: true/false # set whether to default to prepare_cached instead of prepare for
    use_serde: true/false # set whether to import serde and annotate generated structs appropriately
  This template will not generate a mod.rs file if the destination file is in a module you'll need to add one manually
  .sql files containing queries can be used to override cache_statements option.
    if nocache appears anywhere in the filename the queries in the file will all use prepare_cached
    if cache appears, (but not nocache) anywhere in the filename the queries will all use prepare
*/

#[allow(unused)]
use rusqlite::{params,OptionalExtension};
{{- if GetPluginOption "use_serde" }}
use serde::{Serialize, Deserialize};
{{- end -}}

{{- range .Queries }}

{{range .Comments}}// {{.}}
{{end}}

{{$rowType := printf "Row_%s" .Name -}}
{{- if or (eq .Cmd ":many") (eq .Cmd ":one") }}
    {{ if GetPluginOption "use_serde" -}}
    #[derive(Serialize, Deserialize, Debug)]
    {{- else -}}
    #[derive(Debug)]
    {{- end }}
    #[allow(non_camel_case_types)]
    pub struct {{ $rowType }} { {{- range .Columns}}
    pub {{.Name}}:
    {{- if not .NotNull }}Option<{{end}}
    {{- template "RustType" .}}
    {{- if not .NotNull }}>{{end}},
    {{- end}}
}

{{end}}
{{- $CacheStatements := $CacheStatementsGlobal -}}
{{- if (Contains (ToLower .Filename) "cache") -}}
  {{- $CacheStatements = true -}}
{{- end -}}
{{- if (Contains (ToLower .Filename) "nocache") -}}
  {{- $CacheStatements = false -}}
{{- end -}}

{{- if eq .Cmd ":many" }}
{{- $returnType := printf "Vec<%s>" $rowType -}}
pub fn {{.Name}}(conn: &rusqlite::Connection{{range .Params}},
  {{.Column.Name}}:{{template "RustType" .Column}}
{{- end}}

 ) -> Result<{{ $returnType }}, rusqlite::Error> {

    let mut stmt = {{- if $CacheStatements -}}conn.prepare_cached{{- else -}}conn.prepare{{- end -}}(r#"{{ .Text }}"#)?;
    let result : Result<{{ $returnType }}, rusqlite::Error> = stmt
        .query_map(params![{{range .Params}} {{.Column.Name}}, {{end}}], |row| {
            Ok({{$rowType}} { {{- range $index, $column := .Columns}}
              {{.Name}}: row.get({{$index}})?,
            {{- end}} })
        })?
        .collect();
    result
}
{{- end -}}



{{- if eq .Cmd ":one" }}
{{- $returnType := printf "Option<%s>" $rowType -}}
pub fn {{.Name}}(conn: &rusqlite::Connection{{range .Params}},
  {{.Column.Name}}:{{template "RustType" .Column}}
{{- end}}

 ) -> Result<{{ $returnType }}, rusqlite::Error> {

    let mut stmt = {{- if $CacheStatements -}}conn.prepare_cached{{- else -}}conn.prepare{{- end -}}(r#"{{ .Text }}"#)?;
    let result : Result<{{ $returnType }}, rusqlite::Error> = stmt
        .query_row(params![{{range .Params}} {{.Column.Name}}, {{end}}], |row| {
            Ok({{$rowType}} { {{- range $index, $column := .Columns}}
              {{.Name}}: row.get({{$index}})?,
            {{- end}} })
        }).optional();
    result
}
{{- end -}}


{{- if eq .Cmd ":exec" }}
pub fn {{.Name}}(conn: &rusqlite::Connection{{range .Params}},
  {{.Column.Name}}:{{template "RustType" .Column}}
{{- end}}

 ) -> Result<usize, rusqlite::Error> {
    conn.execute(r#"{{ .Text }}"#, ({{range .Params}} {{.Column.Name}}, {{end}}))
}
{{- end -}}


{{- end -}}
